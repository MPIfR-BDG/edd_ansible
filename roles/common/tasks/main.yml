---

- name: Check for custom vs default container names
  block:
    - set_fact:
        default_container_name : "{{ image_name }}"
      when: default_container_name is not defined
    - set_fact:
        container_name: "{{ default_container_name }}"
      when: container_name is not defined
    - set_fact:
        edd_container: "{{ {} }}"
      when: edd_container is not defined
  tags:
    - always


- name: Launch EDD docker container "{{ image_name }}"
  block:
    - debug:
        msg: Launch EDD docker container "{{ image_name }}"
    - file:
        path: "{{ data_dir }}"
        state: directory
        mode: '0777'
    - acl:
        path: "{{ data_dir }}"
        default: yes
        recursive: yes
        etype: mask
        permissions: rwx
        state: present
    - shell: netstat -nlt4 | grep -oP '(?<=0.0.0.0:)(\d+)'
      register: used_ports

    - set_fact:
        bind_port: "{{ edd_katcp_ports| difference(used_ports.stdout_lines | map('int') | list) | first | default(0) }}"
      failed_when: bind_port | int == 0
    - debug:
        msg: " {{ container_name }} katcp listening on port {{ bind_port }}"

    - docker_container:
        name: "{{ container_name }}"
        image: "{{ docker_registry }}:{{ docker_registry_port }}/{{ image_name }}:latest"
        command: "{{ container_cmd }}"
        state: started            # ensure that is running
        pull: yes
        privileged: yes
        auto_remove: yes
        runtime: "{{ docker_runtime }}"
        devices:
          "{{ devices_networking }}"
        network_mode: host
        capabilities:
          - "IPC_LOCK"
        volumes:
          - "{{ data_dir }}:/mnt:rw"
        detach: yes

    - set_fact:
        edd_container: "{{ edd_container | combine( { container_name: {'port': bind_port, 'output_dir': data_dir} } )}}"
        cacheable: true

- name: Stop EDD docker container "{{ image_name }}"
  block:
    - docker_container:
        name: "{{ container_name }}"
        state: absent
    - set_fact:
        edd_container: '{{ edd_container | dict2items | rejectattr( "key", "equalto", container_name )|list|items2dict }}'
        cacheable: true
  tags:
    - never
    - stop


- name: Build docker image "{{ image_name }}"
  block:
  - name: Remove image
    docker_image:
      name: "{{ docker_registry }}:{{ docker_registry_port }}/{{ image_name }}"
      state: absent
      force_absent: yes

  - name: Create build directory
    tempfile:
      state: directory
      suffix: temp
    register: build_directory

  - name: Copy dockerfile from template
    template:
      src: Dockerfile
      dest: "{{ build_directory.path }}/Dockerfile"


  - name: Copy additional build files
    copy:
      src: "{{ item }}"
      dest: "{{ build_directory.path }}/"
    with_fileglob:
      - "{{ additional_build_files.path }}/*"
    when: additional_build_files is defined


  - name: Build and push image
    docker_image:
      name: "{{ docker_registry }}:{{ docker_registry_port }}/{{ image_name }}"
      source: build
      force_source: true
      build:
        path: "{{ build_directory.path }}"
        pull: yes
        nocache: true
      push: yes

  - name: remove the temporary directory
    file:
      path: "{{ build_directory.path }}"
      state: absent
    when: build_directory.path is defined


  run_once: true    # only need to run on one machine
  tags:
    - never         # only run when build tag is specified
    - build


